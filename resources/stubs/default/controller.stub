<?php

namespace {{namespace}};

use Exception;
use Illuminate\Routing\Controller as BaseController;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Contracts\Pagination\Paginator;
use {{model}} as Model;
use {{storeRequest}};
use {{updateRequest}};
use {{updateContentRequest}};
use DB, Notifier;

class {{name}} extends BaseController
{
    /**
     * @var Model
     */
    protected $model;

    /**
     * Base des alias des routes nommées.
     * Exemple : route("{$this->routeBaseAlias}.edit");
     *
     * @var string
     */
    protected $routeBaseAlias = '{{routeBaseAlias}}';

    /**
     * Base des clés des traductions.
     * Exemple : trans("{$this->langBaseKey}.store_success");
     *
     * @var string
     */
    protected $langBaseKey = '{{langBaseKey}}';

    /**
     * Noms complets des différentes vues.
     * Exemple : view($this->views['index']);
     *
     * @var array
     */
    protected $views = [
        'index'           => '{{viewBaseName}}.index',
        'panel-list'      => '{{viewBaseName}}.panel-list',
        'panel-create'    => '{{viewBaseName}}.panel-create',
        'panel-edit'      => '{{viewBaseName}}.panel-edit',
        'form'            => '{{viewBaseName}}.form',
    ];

    /**
     * Options permettant d'activer/désactiver rapidement des fonctionnalités
     * des écrans de CRUD sans avoir à aller rechercher les modifications à
     * faire dans le code.
     *
     * @var array
     */
    protected $options = [
        'creatable'       => true, // afficher le formulaire de création à côté de la liste
        'editable'        => true, // afficher le bouton de modification dans la liste
        'contentEditable' => true, // rendre éditable les libellés des enregistrements depuis la liste
        'activatable'     => true, // afficher le bouton actif/inactif dans la liste
        'sortable'        => true, // rendre ordonnable manuellement les enregistrements dans la liste
        'destroyable'     => true, // afficher le bouton de suppression dans la liste
    ];

    /**
     * Constructeur.
     *
     * @param  Model $model
     * @return void
     */
    public function __construct(Model $model)
    {
        $this->model = $model;
    }

    /**
     * Affiche la liste des enregistrements et le formulaire d'ajout.
     *
     * @return Response
     */
    public function index()
    {
        $variables = array_merge($this->compactAttributes(), [
            'list' => $this->getList()
        ]);

        return view($this->views['index'], $variables);
    }

    /**
     * Affiche le formulaire de création d'un enregistrement.
     *
     * @return Response
     */
    public function create()
    {
        if (!$this->options['creatable']) abort(404);

        $variables = array_merge($this->compactAttributes(), [
            'list' => $this->getList()
        ]);

        return view($this->views['index'], $variables);
    }

    /**
     * Affiche le formulaire d'édition d'un enregistrement.
     *
     * @param  mixed $id
     * @return Response
     */
    public function edit($id)
    {
        if (!$this->options['editable']) abort(404);

        $variables = array_merge($this->compactAttributes(), [
            'list'   => $this->getList(),
            'record' => $this->model->findOrFail($id)
        ]);

        return view($this->views['index'], $variables);
    }

    /**
     * Ajoute un nouvel enregistrement.
     *
     * @param  StoreRequest $request
     * @return Response
     */
    public function store(StoreRequest $request)
    {
        if (!$this->options['creatable']) abort(404);

        $data = [
            'libelle' => $request->input('libelle')
        ];
        if ($this->options['sortable']) {
            $data['ordre'] = $this->model->max('ordre') + 1;
        }

        $this->model->create($data);

        Notifier::success( trans("{$this->langBaseKey}.store_success") );

        return back();
    }

    /**
     * Modifie un enregistrement existant.
     *
     * @param  mixed         $id
     * @param  UpdateRequest $request
     * @return Response
     */
    public function update($id, UpdateRequest $request)
    {
        if (!$this->options['editable']) abort(404);

        $this->model->findOrFail($id)->update([
            'libelle' => $request->input('libelle')
        ]);

        Notifier::success( trans("{$this->langBaseKey}.update_success") );

        return back();
    }

    /**
     * Modifie le contenu "content editable" d'un enregistrement.
     *
     * @param  mixed                $id
     * @param  UpdateContentRequest $request
     * @return Response
     */
    public function updateContent($id, UpdateContentRequest $request)
    {
        if (!$this->options['contentEditable']) abort(404);

        $this->model->findOrFail($id)->update([
            'libelle' => $request->input('content')
        ]);

        return response()->json([
            'message' => trans("{$this->langBaseKey}.update_success"),
            'content' => $request->input('content')
        ]);
    }

    /**
     * Active un enregistrement.
     *
     * @param  mixed $id
     * @return Response
     */
    public function enable($id)
    {
        if (!$this->options['activatable']) abort(404);

        $this->model->findOrFail($id)->update(['actif' => 1]);

        Notifier::success( trans("{$this->langBaseKey}.enable_success") );

        return back();
    }

    /**
     * Désactive un enregistrement.
     *
     * @param  mixed $id
     * @return Response
     */
    public function disable($id)
    {
        if (!$this->options['activatable']) abort(404);

        $this->model->findOrFail($id)->update(['actif' => 0]);

        Notifier::success( trans("{$this->langBaseKey}.disable_success") );

        return back();
    }

    /**
     * Modifie l'ordre des enregistrements.
     *
     * @param  Request $request
     * @return Response
     */
    public function sort(Request $request)
    {
        if (!$this->options['sortable']) abort(404);

        $sort = array_map('intval', $request->input('sort', []));

        DB::transaction(function() use ($sort)
        {
            foreach ($sort as $value => $id) {
                $this->model->whereId($id)->update(['ordre' => $value + 1]);
            }
        });

        return response()->json([
            'message' => trans("{$this->langBaseKey}.sort_success")
        ]);
    }

    /**
     * Supprime un enregistrement.
     *
     * @param  mixed $id
     * @return Response
     */
    public function destroy($id)
    {
        if (!$this->options['destroyable']) abort(404);

        try {
            $this->model->destroy($id);
        }
        catch (Exception $e) {
            return back()->withErrors( trans("{$this->langBaseKey}.destroy_failure") );
        }

        Notifier::success( trans("{$this->langBaseKey}.destroy_success") );

        return back();
    }

    // ------------------------------------------------------------------------
    // METHODES HELPER
    // ------------------------------------------------------------------------

    /**
     * Récupère et retourne la liste des enregistrements.
     *
     * @return Collection|Paginator
     */
    protected function getList()
    {
        if ($this->options['sortable']) {
            return $this->model->orderBy('ordre')->get();
        }

        return $this->model->paginate();
    }

    /**
     * Compacte les valeurs des attributs pour les passer aux vues.
     *
     * @return array
     */
    protected function compactAttributes()
    {
        return [
            'routeBaseAlias' => $this->routeBaseAlias,
            'langBaseKey'    => $this->langBaseKey,
            'views'          => $this->views,
            'options'        => $this->options
        ];
    }
}
